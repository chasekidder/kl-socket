PROGRAM socket
%NOBUSYLAMP
%COMMENT = ''
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR

%include errors.klt
%include files.klt
%include display.c.klt
%include socket.klt

--log name for socket messages
%define USE_LOG TRUE
--define LOG_NAME 'RD:socket_msg.DT'
%define LOG_NAME ''

%include errors.klh

%include socket.private.klh
%include socket.klh

%class usrdis('dispclass.klc','dispclass.klh')

--private

ROUTINE socket__set_port_
  VAR
    entry : INTEGER
  BEGIN
    SET_VAR(entry,'*SYSTEM*', this.env + '.$SERVER_PORT', (this.port), this.status)
    IF this.status <> 0 THEN
      karelError(this.status, 'could not set port for ' + this.tag, ER_ABORT)
    ENDIF
  END socket__set_port_

ROUTINE socket__set_ip_
  VAR
    entry : INTEGER
    ustr : ARRAY[1] OF STRING[13]
  BEGIN
    IF this.ip = '' THEN
      SET_VAR(entry,'*SYSTEM*', this.env + '.$REMOTE', ustr[1], this.status)
    ELSE
      SET_VAR(entry,'*SYSTEM*', this.env + '.$REMOTE', this.ip, this.status)
    ENDIF

    IF this.status = VAR_UNINIT THEN this.status = 0 ; ENDIF -- do not error on uninitalized data
    IF this.status <> 0 THEN
      karelError(this.status, 'could not set ip for ' + this.tag, ER_ABORT)
    ENDIF
  END socket__set_ip_

ROUTINE socket__disconnect_
  BEGIN
      usrdis__print(INFO, this.tag + ' DISCONNECTING...')

      --disconnect
      MSG_DISCO(this.tag, this.status)--CLOSING PORT BEFORE START

      IF this.status <> 0 THEN
        usrdis__print(INFO, 'Trouble disconnecting...')
        karelError(this.status, 'could not disconnect from ' + this.tag, ER_WARN)
      ELSE
        this.connected = FALSE
        usrdis__print(INFO, this.tag + ' DISCONNECTED')
      ENDIF

    --close server file
    CLOSE FILE fl

  END socket__disconnect_

ROUTINE socket__connect_
  VAR
    dummystr : STRING[3]
  BEGIN
    usrdis__print(INFO, this.tag + ' CONNECTING.....')

    --connect to tag
    MSG_CONNECT(this.tag, this.status)
    --set socket stream
    SET_FILE_ATR(fl, ATR_UF)-- for binary file
    dummystr = this.tag
    CLR_IO_STAT(fl)
    OPEN FILE fl ('RW', dummystr)
    this.status = IO_STATUS(fl)
    --check status
    IF this.status = 0 THEN
      this.connected = TRUE
      usrdis__print(INFO, this.tag + ' CONNECTED')
    ELSE
      this.connected = FALSE
      usrdis__print(INFO, 'Could not connect! ' + this.tag + ' DISCONNECTED')
    ENDIF

  END socket__connect_

--server

ROUTINE socket__set_server_tag_
  BEGIN
    RETURN('S' + CHR(number + ORD('0', 1)) + ':')
  END socket__set_server_tag_

ROUTINE socket__set_server_var_
  BEGIN
    RETURN('$HOSTS_CFG[' + CHR(number + ORD('0', 1)) + ']')
  END socket__set_server_var_

--client
ROUTINE socket__set_client_tag_
  BEGIN
    RETURN('C' + CHR(number + ORD('0', 1)) + ':')
  END socket__set_client_tag_

ROUTINE socket__set_client_var_
  BEGIN
    RETURN('$HOSTC_CFG[' + CHR(number + ORD('0', 1)) + ']')
  END socket__set_client_var_


--

ROUTINE new_util_(this : T_SOCKET; typ : INTEGER; no : INTEGER;  port : INTEGER; ip_address : STRING)
  BEGIN
    IF (no < 1) AND (no >= 8) THEN
      karelError(INVALID_INDEX, CHR(no + ORD('0', 1)) + ' is an invalid client.' , ER_ABORT)
    ENDIF

    this.connected = FALSE
    this.status = 0
    this.port = port
    this.ip = ip_address

    this.number = no
    SELECT typ OF
      CASE(TAG_CLIENT):
        this.tag = socket__set_client_tag_((this.number))
        this.env = socket__set_client_var_((this.number))
      CASE(TAG_SERVER):
        this.tag = socket__set_server_tag_((this.number))
        this.env = socket__set_server_var_((this.number))
      ELSE:
        karelError(INVALID_INDEX, 'client/server type not set correctly' , ER_ABORT)
    ENDSELECT

    --initialize log
    --(log_filename, show_date, show_debug, show_info)
%ifeq USE_LOG TRUE
    usrdis__constructor(LOG_NAME, TRUE, FALSE, TRUE)
%else
    --print to display
    usrdis__constructor('', TRUE, FALSE, TRUE)
%endif

    usrdis__print(INFO, this.tag + ' Started...')
  END new_util_

ROUTINE delete_util_(this : T_SOCKET)
  BEGIN
    this.connected = FALSE
    this.status = 0
    this.port = 0
    this.ip = ''
    this.number = 0
    this.tag = ''
    this.env = ''

    --write to log
    usrdis__write_pipe
    usrdis__destructor
  END delete_util_


--public

ROUTINE socket__check_tag
  VAR
    entry : INTEGER
    out_state : INTEGER
  BEGIN
    GET_VAR(entry, '*SYSTEM*', this.env + '.$STATE', out_state, this.status)
    IF (this.status <> 0) OR (out_state <> TAG_STARTED) THEN
      -- TAG config not correct, or couldn't read it
      karelError(this.status, this.tag + ' is not started.' , ER_ABORT)
    ENDIF
  END socket__check_tag

ROUTINE socket__start
  BEGIN
    --set port
    socket__set_port_(this)
    --set ip
    socket__set_ip_(this)
    --check that server is STARTED
    socket__check_tag(this)

    REPEAT
      --disconnect
      socket__disconnect_(this, fl)
      --connect
      socket__connect_(this, fl)

      DELAY 500
    UNTIL(this.status=0)

  END socket__start

ROUTINE socket__stop
  BEGIN
    REPEAT
      socket__disconnect_(this, fl)
      DELAY 500
    UNTIL(this.status=0)
  END socket__stop

--server routines
ROUTINE socket__new_server
  BEGIN
    new_util_(this, TAG_SERVER, server_no, port, ip_address)
  END socket__new_server

ROUTINE socket__delete_server
  BEGIN
    usrdis__print(INFO, this.tag + ' Deleted.')

    delete_util_(this)
  END socket__delete_server

--client routines
ROUTINE socket__new_client
  BEGIN
    new_util_(this, TAG_CLIENT, client_no, port, ip_address)
  END socket__new_client

ROUTINE socket__delete_client
  BEGIN
    usrdis__print(INFO, this.tag + ' Deleted.')

    delete_util_(this)
  END socket__delete_client


-- read routines

-- initialize recursive function setting i=1
ROUTINE socket__read_into_string_buffer
  VAR
    n_bytes : INTEGER
    status : INTEGER
  BEGIN
    --read how many bytes are in the file buffer
    BYTES_AHEAD(fl, n_bytes, status)
    --if error on byte read warn user
    IF status <> 0 THEN
      karelError(status, 'Socket comm error', ER_WARN)
    ENDIF
    --handle uninit bytes
    IF UNINIT(n_bytes) THEN n_bytes = 0; ENDIF

    --exit recursion if no bytes are read
    IF n_bytes <= 0 THEN
      this.status = IO_STATUS(fl)
      CLR_IO_STAT(fl)
      --no more data to read
      RETURN
    ENDIF

    --recursively call function in case read bytes is larger than buffer strings
    --to store in next index of the buffer
    IF i > ARRAY_LEN(buffer) THEN
      karelError(VAR_TOO_BIG, 'Buffer array is not large enough.', ER_ABORT)
    ENDIF

    IF (n_bytes > 0) AND (status = 0) THEN
      DELAY 100
      usrdis__print(DEBUG, 'read ' + CHR(n_bytes + ORD('0', 1)) + & 
                           ' bytes. Into buff ' + CHR(i + ORD('0', 1)) )
      READ fl(buffer[i]::n_bytes)
      
      IF NOT UNINIT(buffer[i]) THEN
        usrdis__print(DEBUG, 'recieved str: ' + buffer[i])
      ENDIF

      socket__read_into_string_buffer(this, fl, buffer, i)

    ENDIF

  END socket__read_into_string_buffer

--write routines

ROUTINE socket__write_into_string_buffer
  VAR
    i, status : INTEGER
  BEGIN
    i = 1
    IF UNINIT(buffer[i]) THEN
      RETURN
    ENDIF

    REPEAT
      usrdis__print(DEBUG, 'send str: ' + buffer[i])
      --write buffer back to comm
      WRITE fl(buffer[i]::STR_LEN(buffer[i]))
      DELAY 100
      i = i + 1
    UNTIL(UNINIT(buffer[i]))
    --send termination bit
    WRITE fl(CR)

    this.status = IO_STATUS(fl)
    CLR_IO_STAT(fl)

    --clear buffer
    SET_UNI_ARRS(progname, varname, 1, (i-1))

  END socket__write_into_string_buffer

BEGIN
END socket
